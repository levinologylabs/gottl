// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_action_tokens.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const userActionTokenCreate = `-- name: UserActionTokenCreate :one
INSERT INTO
    user_action_tokens (user_id, token, action, expires_at)
VALUES
    ($1, $2, $3, $4) RETURNING id, created_at, expires_at, user_id, token, action
`

type UserActionTokenCreateParams struct {
	UserID    uuid.UUID
	Token     []byte
	Action    string
	ExpiresAt time.Time
}

func (q *Queries) UserActionTokenCreate(ctx context.Context, arg UserActionTokenCreateParams) (UserActionToken, error) {
	row := q.db.QueryRow(ctx, userActionTokenCreate,
		arg.UserID,
		arg.Token,
		arg.Action,
		arg.ExpiresAt,
	)
	var i UserActionToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UserID,
		&i.Token,
		&i.Action,
	)
	return i, err
}

const userActionTokenDelete = `-- name: UserActionTokenDelete :exec
DELETE FROM
    user_action_tokens
WHERE
    id = $1
`

func (q *Queries) UserActionTokenDelete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, userActionTokenDelete, id)
	return err
}

const userActionTokenGet = `-- name: UserActionTokenGet :one
SELECT
    id, created_at, expires_at, user_id, token, action
FROM
    user_action_tokens
WHERE
    token = $1
    AND action = $2
    AND expires_at > $3
LIMIT
    1
`

type UserActionTokenGetParams struct {
	Token  []byte
	Action string
	Now    time.Time
}

func (q *Queries) UserActionTokenGet(ctx context.Context, arg UserActionTokenGetParams) (UserActionToken, error) {
	row := q.db.QueryRow(ctx, userActionTokenGet, arg.Token, arg.Action, arg.Now)
	var i UserActionToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.UserID,
		&i.Token,
		&i.Action,
	)
	return i, err
}
