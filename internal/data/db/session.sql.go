// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const sessionCreate = `-- name: SessionCreate :exec
INSERT INTO
    user_sessions (user_id, token, expires_at)
VALUES
    ($1, $2, $3)
`

type SessionCreateParams struct {
	UserID    uuid.UUID
	Token     []byte
	ExpiresAt time.Time
}

func (q *Queries) SessionCreate(ctx context.Context, arg SessionCreateParams) error {
	_, err := q.db.Exec(ctx, sessionCreate, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const sessionDeleteByToken = `-- name: SessionDeleteByToken :exec
DELETE FROM
    user_sessions
WHERE
    token = $1
`

func (q *Queries) SessionDeleteByToken(ctx context.Context, token []byte) error {
	_, err := q.db.Exec(ctx, sessionDeleteByToken, token)
	return err
}

const sessionDeleteExpiredBefore = `-- name: SessionDeleteExpiredBefore :execrows
DELETE FROM
    user_sessions
WHERE
    expires_at < $1
`

// SessionDeleteExpiredBefore deletes every session that has expired
// before the given time.
func (q *Queries) SessionDeleteExpiredBefore(ctx context.Context, expiresAt time.Time) (int64, error) {
	result, err := q.db.Exec(ctx, sessionDeleteExpiredBefore, expiresAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const userBySession = `-- name: UserBySession :one
SELECT
    users.id, users.created_at, users.updated_at, users.username, users.email, users.password_hash, users.is_admin, users.stripe_customer_id, users.stripe_subscription_id, users.subscription_start_date, users.subscription_ended_date
FROM
    user_sessions
    JOIN users ON user_sessions.user_id = users.id
WHERE
    user_sessions.token = $1
    AND user_sessions.expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) UserBySession(ctx context.Context, token []byte) (User, error) {
	row := q.db.QueryRow(ctx, userBySession, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.SubscriptionStartDate,
		&i.SubscriptionEndedDate,
	)
	return i, err
}
