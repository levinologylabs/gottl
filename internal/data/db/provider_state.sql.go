// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: provider_state.sql

package db

import (
	"context"
	"time"
)

const providerStateCreate = `-- name: ProviderStateCreate :exec
INSERT INTO
    user_identity_provider_state (token, expires_at)
VALUES
    ($1, $2)
`

type ProviderStateCreateParams struct {
	Token     []byte
	ExpiresAt time.Time
}

func (q *Queries) ProviderStateCreate(ctx context.Context, arg ProviderStateCreateParams) error {
	_, err := q.db.Exec(ctx, providerStateCreate, arg.Token, arg.ExpiresAt)
	return err
}

const providerStateDelete = `-- name: ProviderStateDelete :exec
DELETE FROM
    user_identity_provider_state
WHERE
    token = $1
`

func (q *Queries) ProviderStateDelete(ctx context.Context, token []byte) error {
	_, err := q.db.Exec(ctx, providerStateDelete, token)
	return err
}

const providerStateGet = `-- name: ProviderStateGet :one
SELECT
    id, token, expires_at
FROM
    user_identity_provider_state
WHERE
    token = $1
`

func (q *Queries) ProviderStateGet(ctx context.Context, token []byte) (UserIdentityProviderState, error) {
	row := q.db.QueryRow(ctx, providerStateGet, token)
	var i UserIdentityProviderState
	err := row.Scan(&i.ID, &i.Token, &i.ExpiresAt)
	return i, err
}
