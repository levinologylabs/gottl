// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: providers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO
    user_identity_providers (
        user_id,
        provider_name,
        provider_user_id,
        metadata
    )
VALUES
    (
        $1,
        $2,
        $3,
        COALESCE($4, '{}' :: jsonb)
    ) RETURNING id, created_at, user_id, provider_name, provider_user_id, metadata
`

type CreateProviderParams struct {
	UserID         uuid.UUID
	ProviderName   string
	ProviderUserID string
	Metadata       interface{}
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (UserIdentityProvider, error) {
	row := q.db.QueryRow(ctx, createProvider,
		arg.UserID,
		arg.ProviderName,
		arg.ProviderUserID,
		arg.Metadata,
	)
	var i UserIdentityProvider
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.ProviderName,
		&i.ProviderUserID,
		&i.Metadata,
	)
	return i, err
}

const deleteProvider = `-- name: DeleteProvider :exec
DELETE FROM
    user_identity_providers
WHERE
    user_id = $1
    AND provider_name = $2
`

type DeleteProviderParams struct {
	UserID       uuid.UUID
	ProviderName string
}

func (q *Queries) DeleteProvider(ctx context.Context, arg DeleteProviderParams) error {
	_, err := q.db.Exec(ctx, deleteProvider, arg.UserID, arg.ProviderName)
	return err
}

const providerGetOne = `-- name: ProviderGetOne :one
SELECT
    id,
    created_at,
    user_id,
    provider_name,
    provider_user_id,
    metadata
FROM
    user_identity_providers
WHERE
    user_id = $1
    AND provider_name = $2
LIMIT
    1
`

type ProviderGetOneParams struct {
	UserID       uuid.UUID
	ProviderName string
}

func (q *Queries) ProviderGetOne(ctx context.Context, arg ProviderGetOneParams) (UserIdentityProvider, error) {
	row := q.db.QueryRow(ctx, providerGetOne, arg.UserID, arg.ProviderName)
	var i UserIdentityProvider
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.ProviderName,
		&i.ProviderUserID,
		&i.Metadata,
	)
	return i, err
}
